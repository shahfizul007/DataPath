`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 10/25/2022 04:31:01 PM
// Design Name: 
// Module Name: lab3dataPath
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////


module lab5dataPath(
    input clk,
    output wire [31:0]pc,
    output wire [31:0] dinstOut,
    output wire ewreg,
    output wire em2reg,
    output wire ewmem,
    output wire [3:0] ealuc,
    output wire ealuimm,
    output wire [4:0] edestReg,
    output wire [31:0] eqa,
    output wire [31:0] eqb,
    output wire [31:0] eimm32,
    
    output wire mwreg,
    output wire mm2reg,
    output wire mwmem,
    output wire [4:0] mdestReg,
    output wire [31:0] mr,
    output wire [31:0] mqb,
    output wire [31:0] mdo,
    output wire wwreg,
    output wire wm2reg,
    output wire [31:0] wr,
    output wire [31:0] wdo
    );
    
    wire[31:0] pc_next;

    programCounter pc_dp(pc_next, clk, pc); 

    pcAdder pcA_dp(pc, pc_next);   

    wire[31:0] instOut;

    instructionMemory IM_dp(pc,instOut);   

    IFIDpipelineRegister If_dp(instOut, clk, dinstOut); 

    wire wreg, m2reg, wmem, aluimm, regrt;
    wire[3:0] aluc;

    wire[5:0] op = dinstOut[31:26];
    wire[5:0] func = dinstOut[5:0];

    controlUnit control_dp(op,func,wreg,m2reg,wmem,aluc,aluimm,regrt);  

    wire[4:0] dest_Reg;
    wire[4:0] rt = dinstOut[20:16];
    wire[4:0] rd = dinstOut[15:11];

    regrtMux Mux_dp(rt, rd, regrt,dest_Reg);   

    wire[4:0] rs = dinstOut[25:21];
    wire[31:0] qa;
    wire[31:0] qb;
    
    wire [4:0] wdestReg;
    wire [31:0] wbData;

    registerFile regFile_dp(rs, rt, wdestReg, wbData, wwreg, clk, qa, qb);    

    wire[31:0] imm32;
    immediateExtender IE_dp(dinstOut,imm32); 

    IDEXEpipelineRegister ID_dp(wreg,m2reg,wmem,aluc,aluimm,dest_Reg,qa,qb,imm32,clk,ewreg,em2reg,
    ewmem,ealuc,ealuimm,edestReg,eqa,eqb,eimm32);

    wire [31:0] b;
    wire [31:0] r;
    
    ALUMux ALU_MUX(eqb, imm32, ealuimm, b);
    
    ALU aluDP(eqa, b, aluc, r);
    
    EXEMEM EXE_MEM(ewreg, em2reg, ewmem, edestReg, r, qb, clk, mwreg,
    mm2reg, mwmem, mdestReg, mr, mqb);
    
    dataMemory DM(mr, mqb, mwmem, clk, mdo);
    
    MEMWB MEM_WB(mwreg, mm2reg, mdestReg, mr, mdo, clk, wwreg, wm2reg,
    wdestReg, wr, wdo);
    
    WBMux wb_mux(wr, wdo, wm2reg, wbData);
    
endmodule

module programCounter(
    input [31:0] nextPc,
    input clk,
    output reg [31:0] pc
    );
    
    initial begin
        pc <= 100;
    end
    
    always@(posedge clk) begin
        pc <= nextPc;
    end

endmodule

module pcAdder(
    input [31:0] pc,
    output reg [31:0] nextPc
    );
    reg [31:0] four = 32'b00000000000000000000000000000100;
    
    always @(*) begin
        nextPc <= pc + four;
    end

endmodule

module instructionMemory(
    input [31:0] pc,
    output reg[31:0] instOut
    );
    
    reg [31:0] memory[0:63];
    
    initial begin
        memory[0] = 32'hA00000AA; 
        memory[1] = 32'h10000011; 
        memory[2] = 32'h20000022; 
        memory[3] = 32'h30000033; 
        memory[4] = 32'h40000044; 
        memory[5] = 32'h50000055;
        memory[6] = 32'h60000066; 
        memory[7] = 32'h70000077; 
        memory[8] = 32'h80000088; 
        memory[9] = 32'h90000099; 
        
        memory[25] = 32'b10001100001000100000000000000000;  //lw $2, 00($1)
        memory[26] = 32'b10001100001000110000000000000100;  //lw $3, 04($1)
        memory[27] = 32'b10001100001001000000000000001000;  //lw $4, 08($1) 
        memory[28] = 32'b10001100001001010000000000001100;  //lw $5, 12($1)
        memory[29] = 32'b00000000010010100011000000100000;  //add $6, $2, $10  
    end
    
    always@(*) begin
        instOut = memory[pc[31:2]];
    end
        

endmodule

module IFIDpipelineRegister(
    input [31:0] instOut,
    input clk,
    output reg [31:0] dinstOut
    );
    
    always@(posedge clk) begin
        dinstOut <= instOut;
    end

endmodule

module controlUnit(
    input [5:0] op,
    input [5:0] func,
    output reg wreg,
    output reg m2reg,
    output reg wmem,
    output reg [3:0] aluc,
    output reg aluimm,
    output reg rgrt
    );
    
    always @(*) begin
        case (op)
            6'b100011:  //LW
            begin
                wreg = 1;
                m2reg = 1;
                wmem = 0;
                aluc = 4'b0010;
                aluimm = 1;
                rgrt = 1;
            end
            6'b100000:  //ADD
            begin
                wreg = 1;
                m2reg = 0;
                wmem = 0;
                aluc = 4'b0010;
                aluimm = 0;
                rgrt = 0;
            end
         endcase
    end

endmodule

module regrtMux(
    input [4:0] rt,
    input [4:0] rd,
    input regrt,
    output reg [4:0] destReg
    );
    
    always@(*) begin
    
        if (regrt == 0) begin 
            destReg <= rd;
        end
        else if (regrt == 1) begin
            destReg <= rt;
        end
    end

endmodule

module registerFile(
    input [4:0] rs,
    input [4:0] rt,
    input [4:0] wdestReg,
    input [31:0] wbData,
    input wwreg,
    input clk,
    output reg [31:0] qa,
    output reg [31:0] qb
    );
    
    reg[31:0] internal[0:31];
    
    integer i;
    initial begin
    for(i=0;i<32;i=i+1) 
        begin
            internal[i] <= 32'b0;
        end
    end
    
    always@(negedge clk) begin
        if (wwreg == 1) begin
            internal[wdestReg] <= wbData; 
        end
    end
    
    always @(*) begin
        qa=internal[rs];
        qb=internal[rt];
    end
endmodule

module immediateExtender(
    input [31:0] dinstOut,
    output reg [31:0] imm32
    );
    wire [15:0] imm = dinstOut[15:0];
    
    always@(imm) begin
        imm32 <= {{16{imm[15]}}, imm[15:0]};
    end

endmodule

module IDEXEpipelineRegister(
    input wreg,
    input m2reg,
    input wmem,
    input [3:0] aluc,
    input aluimm,
    input [4:0] destReg,
    input [31:0] qa,
    input [31:0] qb,
    input [31:0] imm32,
    input clk,
    output reg ewreg,
    output reg em2reg,
    output reg ewmem,
    output reg [3:0] ealuc,
    output reg ealuimm,
    output reg [4:0] edestReg,
    output reg [31:0] eqa,
    output reg [31:0] eqb,
    output reg [31:0] eimm32
    );
    
    always@(posedge clk) begin
        ewreg <= wreg;
        em2reg <= m2reg;
        ewmem <= wmem;
        ealuc <= aluc;
        ealuimm <= aluimm;
        edestReg <= destReg;
        eqa <= qa;
        eqb <= qb;
        eimm32 <= imm32;
    end

endmodule

module ALUMux(
    input [31:0] eqb,
    input [31:0] eimm32,
    input ealuimm,
    output reg [31:0] b
    );
    
    always@(*) begin
        if (ealuimm == 0) begin
            b <= eqb;
        end
        else if (ealuimm == 1) begin
            b <= eimm32;
        end
    end
    
endmodule

module ALU(
    input [31:0] eqa,
    input [31:0] b,
    input [3:0] ealuc,
    output reg [31:0] r
    );
          
    always@(*) begin 
        case (ealuc)
            4'b0010: begin
                r = eqa + b;
            end
        endcase          
    end
        
endmodule

module EXEMEM(
    input ewreg,
    input em2reg,
    input ewmem,
    input [4:0] edestReg,
    input [31:0] r,
    input [31:0] eqb,
    input clk,
    output reg mwreg,
    output reg mm2reg,
    output reg mwmem,
    output reg [4:0] mdestReg,
    output reg [31:0] mr,
    output reg [31:0] mqb
    );
    
        always@(posedge clk) begin
            mwreg <= ewreg;
            mm2reg <= em2reg;
            mwmem <= ewmem;
            mdestReg <= edestReg;
            mr <= r;
            mqb <= eqb;
        end
    
endmodule

module dataMemory(
    input [31:0] mr,
    input [31:0] mqb,
    input mwmem,
    input clk,
    output reg [31:0] mdo
    );
    
    reg [31:0] mem [63:0];
    
    initial begin
        mem[0] = 32'hA00000AA; 
        mem[1] = 32'h10000011; 
        mem[2] = 32'h20000022; 
        mem[3] = 32'h30000033; 
        mem[4] = 32'h40000044; 
        mem[5] = 32'h50000055;
        mem[6] = 32'h60000066; 
        mem[7] = 32'h70000077; 
        mem[8] = 32'h80000088; 
        mem[9] = 32'h90000099; 
        
        mem[25] = 32'b10001100001000100000000000000000; //lw $2, 00($1)
        mem[26] = 32'b10001100001000110000000000000100; //lw $3, 04($1)
        mem[27] = 32'b10001100001001000000000000001000; //lw $4, 08($1)
        mem[28] = 32'b10001100001001010000000000001100; //lw $5, 12($1)
        mem[29] = 32'b00000000010010100011000000100000;  //add $6, $2, $10  
    end
    
    always @(*) begin
        mdo = mem[mr[31:2]];
    end
    
    always@(negedge clk) begin
        if(mwmem == 1) begin
            mem[mr[31:2]] = mqb;
        end
    end
    
endmodule

module MEMWB(
    input mwreg,
    input mm2reg,
    input [4:0] mdestReg,
    input [31:0] mr,
    input [31:0] mdo,
    input clk,
    output reg wwreg,
    output reg wm2reg,
    output reg [4:0] wdestReg,
    output reg [31:0] wr,
    output reg [31:0] wdo
    );
    
    always@(posedge clk) begin
        wwreg <= mwreg;
        wm2reg <= mm2reg;
        wdestReg <= mdestReg;
        wr <= mr;
        wdo <= mdo;
    end
    
endmodule

module WBMux(
    input [31:0] wr,
    input [31:0] wdo,
    input wm2reg,
    output reg [31:0] wbData
    );
    
    always@(*) begin
        if (wm2reg == 0) begin
            wbData <= wr;
        end
        else begin
            wbData <= wdo;
        end
    end
    
    
endmodule
